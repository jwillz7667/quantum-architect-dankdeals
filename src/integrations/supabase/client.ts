// This file is automatically generated. Do not edit it directly.
import type { SupabaseClient } from '@supabase/supabase-js';
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL as string | undefined;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY as string | undefined;

// Create a dummy client for error cases
const createDummyClient = (): SupabaseClient<Database> => {
  console.error('Supabase client not initialized due to missing configuration');
  return {
    auth: {
      signUp: () => Promise.reject(new Error('Supabase not configured')),
      signIn: () => Promise.reject(new Error('Supabase not configured')),
      signOut: () => Promise.reject(new Error('Supabase not configured')),
      getSession: () => Promise.resolve({ data: { session: null }, error: null }),
      onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
    },
    from: () => ({
      select: () => Promise.reject(new Error('Supabase not configured')),
      insert: () => Promise.reject(new Error('Supabase not configured')),
      update: () => Promise.reject(new Error('Supabase not configured')),
      delete: () => Promise.reject(new Error('Supabase not configured')),
    }),
  } as unknown as SupabaseClient<Database>;
};

// Initialize the client
let supabaseClient: SupabaseClient<Database>;

// Production environment validation
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  const errorMessage =
    'Missing required Supabase environment variables. Please check your .env configuration.';

  console.error(errorMessage);
  console.error('Required variables: VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY');

  // In development, use dummy client instead of throwing
  // This prevents the app from crashing during development

  // In production, use dummy client to prevent app crash
  supabaseClient = createDummyClient();
} else {
  // Validate URL format
  let isValidUrl = true;
  try {
    new URL(SUPABASE_URL);
  } catch {
    console.error('Invalid VITE_SUPABASE_URL format');
    isValidUrl = false;
  }

  // Ensure we're not using example/placeholder values
  const isPlaceholder =
    SUPABASE_URL.includes('your-project') || SUPABASE_PUBLISHABLE_KEY.includes('your-');
  if (isPlaceholder) {
    console.error('Using placeholder Supabase credentials');
  }

  // Create client based on validation
  if (!isValidUrl || (isPlaceholder && import.meta.env.PROD)) {
    supabaseClient = createDummyClient();
  } else {
    // Create the actual client when configuration is valid
    supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
      },
    });
  }
}

export const supabase = supabaseClient;
