name: Environment Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - deploy-staging
          - deploy-production
          - rollback-production
          - sync-staging-to-production
          - refresh-staging
      version:
        description: 'Version/SHA to deploy (optional)'
        required: false
        type: string

permissions:
  contents: read
  deployments: write
  actions: read

env:
  NODE_VERSION: '20'

jobs:
  # Validate input and set up deployment parameters
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
      ref: ${{ steps.determine.outputs.ref }}
      action: ${{ steps.determine.outputs.action }}
    steps:
      - name: Determine deployment parameters
        id: determine
        run: |
          case "${{ github.event.inputs.action }}" in
            "deploy-staging"|"refresh-staging")
              echo "environment=staging" >> $GITHUB_OUTPUT
              echo "ref=${{ github.event.inputs.version || github.sha }}" >> $GITHUB_OUTPUT
              ;;
            "deploy-production"|"rollback-production"|"sync-staging-to-production")
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "ref=${{ github.event.inputs.version || github.sha }}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "‚ùå Invalid action: ${{ github.event.inputs.action }}"
              exit 1
              ;;
          esac
          echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT

  # Pre-deployment validation
  validate:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run quality checks
        run: |
          npm run lint
          npm run type-check
          npm run test:unit

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_ADMIN_EMAIL: ${{ secrets.VITE_ADMIN_EMAIL }}
          VITE_ENV: ${{ needs.setup.outputs.environment }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: validated-build-${{ github.sha }}
          path: dist/
          retention-days: 7

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [setup, validate]
    if: contains(fromJSON('["deploy-staging", "refresh-staging"]'), needs.setup.outputs.action)
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.ref }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: validated-build-${{ github.sha }}
          path: dist/

      - name: Deploy to Vercel Staging
        id: deploy
        run: |
          npm i -g vercel@latest
          vercel pull --yes --environment=staging --token=${{ secrets.VERCEL_TOKEN }}
          URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to staging: $URL"

      - name: Run smoke tests
        run: |
          npx playwright test --grep "@smoke" --project=chromium
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.deploy.outputs.url }}

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ needs.setup.outputs.ref }}',
              environment: 'staging',
              description: 'Staging deployment',
              auto_merge: false
            });

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup, validate]
    if: needs.setup.outputs.action == 'deploy-production'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.ref }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: validated-build-${{ github.sha }}
          path: dist/

      - name: Deploy to Vercel Production
        id: deploy
        run: |
          npm i -g vercel@latest
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to production: $URL"

      - name: Deploy Supabase Edge Functions
        run: |
          npx supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          npx supabase functions deploy --verify-jwt
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Run production smoke tests
        run: |
          npx playwright test --grep "@smoke" --project=chromium
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.deploy.outputs.url }}

      - name: Create production deployment record
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ needs.setup.outputs.ref }}',
              environment: 'production',
              description: 'Production deployment',
              auto_merge: false
            });

  # Rollback production
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.action == 'rollback-production'
    environment:
      name: production
      url: ${{ steps.rollback.outputs.url }}
    steps:
      - name: Get previous deployment
        id: previous
        uses: actions/github-script@v7
        with:
          script: |
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: 'production',
              per_page: 5
            });
            
            const successful = deployments.data.find(d => d.id !== '${{ github.event.inputs.version }}');
            if (!successful) {
              core.setFailed('No previous successful deployment found');
              return;
            }
            
            core.setOutput('sha', successful.sha);
            core.setOutput('ref', successful.ref);

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.previous.outputs.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci --prefer-offline --no-audit
          npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_ADMIN_EMAIL: ${{ secrets.VITE_ADMIN_EMAIL }}
          VITE_ENV: production

      - name: Rollback Vercel deployment
        id: rollback
        run: |
          npm i -g vercel@latest
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Rolled back production to: $URL"

      - name: Verify rollback
        run: |
          npx playwright test --grep "@smoke" --project=chromium
        env:
          PLAYWRIGHT_BASE_URL: ${{ steps.rollback.outputs.url }}

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [setup, deploy-staging, deploy-production, rollback-production]
    if: always()
    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå Deployment failed" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "status=cancelled" >> $GITHUB_OUTPUT
            echo "message=‚ö†Ô∏è Deployment cancelled" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=‚úÖ Deployment successful" >> $GITHUB_OUTPUT
          fi

      - name: Create summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: ${{ needs.setup.outputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ref**: ${{ needs.setup.outputs.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.status.outputs.status }}" == "success" ]]; then
            echo "### ‚úÖ Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Deployment failed!" >> $GITHUB_STEP_SUMMARY
            echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ steps.status.outputs.status }}
          text: |
            ${{ steps.status.outputs.message }}
            Action: ${{ needs.setup.outputs.action }}
            Environment: ${{ needs.setup.outputs.environment }}
            Ref: ${{ needs.setup.outputs.ref }}