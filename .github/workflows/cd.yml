name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: read
  deployments: write

jobs:
  # Prepare deployment
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "environment=production" >> $GITHUB_OUTPUT
            else
              echo "environment=staging" >> $GITHUB_OUTPUT
            fi
          fi
      
      - name: Generate version
        id: version
        run: |
          VERSION="${{ github.sha }}"
          SHORT_VERSION="${VERSION:0:7}"
          echo "version=$SHORT_VERSION" >> $GITHUB_OUTPUT

  # Deploy to Netlify
  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: prepare-deployment
    environment:
      name: ${{ needs.prepare-deployment.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_ENV: ${{ needs.prepare-deployment.outputs.environment }}

      - name: Deploy to Netlify
        id: deploy
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './dist'
          production-deploy: ${{ needs.prepare-deployment.outputs.environment == 'production' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy ${{ needs.prepare-deployment.outputs.version }} from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          enable-commit-status: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 10

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ needs.prepare-deployment.outputs.environment }}',
              description: 'Netlify deployment v${{ needs.prepare-deployment.outputs.version }}',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployed to Netlify'
            });

  # Deploy database migrations
  deploy-migrations:
    name: Deploy Database Migrations
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.environment == 'production'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Check for pending migrations
        id: check-migrations
        run: |
          PENDING=$(supabase migration list | grep "remote database" -A 100 | grep "NOT applied" || echo "")
          if [[ -n "$PENDING" ]]; then
            echo "has_pending=true" >> $GITHUB_OUTPUT
            echo "::notice::Pending migrations found"
          else
            echo "has_pending=false" >> $GITHUB_OUTPUT
            echo "::notice::No pending migrations"
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Apply migrations
        if: steps.check-migrations.outputs.has_pending == 'true'
        run: |
          echo "ðŸš€ Applying database migrations..."
          supabase db push
          echo "âœ… Migrations applied successfully"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

  # Deploy Supabase Edge Functions
  deploy-edge-functions:
    name: Deploy Edge Functions
    runs-on: ubuntu-latest
    needs: [prepare-deployment, deploy-migrations]
    if: |
      always() &&
      !failure() &&
      !cancelled() &&
      needs.prepare-deployment.outputs.environment == 'production'
    steps:
      - uses: actions/checkout@v4

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Deploy Edge Functions
        run: |
          echo "ðŸš€ Deploying edge functions..."
          # Publicly callable or webhook endpoints should NOT verify JWT
          supabase functions deploy process-order --no-verify-jwt
          supabase functions deploy process-email-queue --no-verify-jwt
          supabase functions deploy process-sms-queue --no-verify-jwt
          supabase functions deploy payments-aeropay-create-session --no-verify-jwt
          supabase functions deploy payments-aeropay-webhook --no-verify-jwt
          supabase functions deploy payments-stronghold-create-session --no-verify-jwt
          supabase functions deploy payments-stronghold-webhook --no-verify-jwt
          supabase functions deploy persona-create-inquiry --no-verify-jwt
          supabase functions deploy persona-webhook --no-verify-jwt
          supabase functions deploy resend-webhook --no-verify-jwt
          supabase functions deploy health-check --no-verify-jwt
          echo "âœ… Edge functions deployed successfully"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # Run smoke tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-netlify, prepare-deployment]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run smoke tests
        run: |
          npm run test:smoke -- --baseURL=${{ needs.deploy-netlify.outputs.url }}
        env:
          ENVIRONMENT: ${{ needs.prepare-deployment.outputs.environment }}

  # Send notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-netlify, smoke-tests, prepare-deployment]
    if: always()
    steps:
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ needs.prepare-deployment.outputs.environment }} ${{ job.status }}
            Version: ${{ needs.prepare-deployment.outputs.version }}
            URL: ${{ needs.deploy-netlify.outputs.url }} 