name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

# Cancel in-progress runs for the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Job to detect what changed to optimize CI runs
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.filter.outputs.src || 'false' }}
      tests: ${{ steps.filter.outputs.tests || 'false' }}
      deps: ${{ steps.filter.outputs.deps || 'false' }}
      ci: ${{ steps.filter.outputs.ci || 'false' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            src:
              - 'src/**'
              - 'public/**'
              - '*.html'
              - 'vite.config.ts'
              - 'tailwind.config.ts'
            tests:
              - 'src/**/*.test.*'
              - 'src/**/*.spec.*'
              - 'tests/**'
              - 'playwright.config.ts'
              - 'vitest.*.config.ts'
            deps:
              - 'package.json'
              - 'package-lock.json'
              - '.npmrc'
            ci:
              - '.github/workflows/**'

  # Validate dependencies and lock file
  validate-deps:
    name: Validate Dependencies
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.deps == 'true' || needs.changes.outputs.ci == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Validate package-lock.json
        run: |
          npm ci --dry-run
          
      - name: Check for security vulnerabilities
        run: |
          npm audit --production --audit-level=high || echo "::warning::Found vulnerabilities"

  # Lint and type check
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [changes, validate-deps]
    if: always() && !cancelled() && !failure() && (needs.changes.outputs.src == 'true' || needs.changes.outputs.ci == 'true')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run type checking
        run: npm run type-check
      
      - name: Run linting
        run: npm run lint
      
      - name: Check formatting
        run: npm run format:check

  # Unit and integration tests
  test-suite:
    name: Test Suite (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    needs: [changes, quality-checks]
    if: always() && !cancelled() && !failure() && (needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true' || needs.changes.outputs.ci == 'true')
    strategy:
      fail-fast: false
      matrix:
        node: ['18', '20', '22']
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run unit tests
        run: npm run test:unit -- --coverage
        env:
          VITE_SUPABASE_URL: https://test.supabase.co
          VITE_SUPABASE_ANON_KEY: test-anon-key
          VITE_ADMIN_EMAIL: test@example.com
          VITE_ENV: test
      
      - name: Upload coverage
        if: matrix.node == '20'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [changes, quality-checks]
    if: always() && !cancelled() && !failure()
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Build application
        shell: bash
        env:
          VITE_SUPABASE_URL_SECRET: ${{ secrets.VITE_SUPABASE_URL || '' }}
          VITE_SUPABASE_ANON_KEY_SECRET: ${{ secrets.VITE_SUPABASE_ANON_KEY || '' }}
        run: |
          export VITE_SUPABASE_URL="${VITE_SUPABASE_URL_SECRET:-'https://example.supabase.co'}"
          export VITE_SUPABASE_ANON_KEY="${VITE_SUPABASE_ANON_KEY_SECRET:-'example-anon-key'}"
          export VITE_ADMIN_EMAIL="admin@example.com"
          export VITE_ENV="production"
          npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 7

  # E2E tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
        shard: [1, 2]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Run E2E tests
        shell: bash
        env:
          VITE_SUPABASE_URL_SECRET: ${{ secrets.VITE_SUPABASE_URL || '' }}
          VITE_SUPABASE_ANON_KEY_SECRET: ${{ secrets.VITE_SUPABASE_ANON_KEY || '' }}
        run: |
          export VITE_SUPABASE_URL="${VITE_SUPABASE_URL_SECRET:-'https://example.supabase.co'}"
          export VITE_SUPABASE_ANON_KEY="${VITE_SUPABASE_ANON_KEY_SECRET:-'example-anon-key'}"
          npm run test:e2e -- --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/2
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: test-results/
          retention-days: 7

  # Lighthouse performance tests
  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
      
      - name: Run Lighthouse CI
        run: |
          npm run lighthouse:ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN || '' }}

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality-checks, test-suite, build, e2e-tests, lighthouse]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "CI failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "CI cancelled"
            exit 1
          else
            echo "CI passed"
          fi