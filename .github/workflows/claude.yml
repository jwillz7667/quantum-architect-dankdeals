name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow Claude to run common development commands
          allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint*),Bash(npm run type-check),Bash(npm run format*),Bash(git status),Bash(git diff)"
          
          # Custom instructions for Claude to follow project standards
          custom_instructions: |
            You are working on DankDeals MN - a cannabis delivery application built with React, TypeScript, Vite, and Supabase.
            
            **Project Guidelines:**
            - Always use TypeScript for new files
            - Follow existing code patterns and component structure
            - Ensure all new features have proper tests
            - Use Tailwind CSS for styling with existing design system
            - Follow the established folder structure in src/
            - Maintain existing security practices and RLS policies
            - Use the established UI components from src/components/ui/
            - Follow the existing cart and auth patterns
            - Ensure mobile-first responsive design
            - Add proper SEO meta tags for new pages
            - Use existing hooks and context patterns
            
            **Code Quality:**
            - Run ESLint and fix all errors before committing
            - Ensure TypeScript strict mode compliance
            - Add proper error handling and loading states
            - Follow accessibility best practices
            - Optimize images and performance
            
            **Testing:**
            - Write unit tests for new components and hooks
            - Add integration tests for complex workflows
            - Ensure E2E tests cover critical user journeys
            - Test responsive design across devices
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

